import torch
import random
import numpy as np
import matplotlib.pyplot as plt
import time

from model import TransformerModel
from loaders.loader import CombinedDataset
from loaders.youtube_loader import FORMAT_RANGES, FORMAT_SIZE
from inference import generate, load_model, TOKEN_DIM, MODEL_PARAMS

device = torch.device("cuda")

ENS_NUMBER = 6
NUM_MODELS = 5

def generate_quad_matrix(n):
    rows = np.arange(1, n+1)
    matrix = np.column_stack((rows**2, rows, np.ones_like(rows)))
    return matrix

def generate_linear_matrix(n):
    rows = np.arange(1, n+1)
    matrix = np.column_stack((rows, np.ones_like(rows)))
    return matrix

M_quad = np.linalg.pinv(generate_quad_matrix(4))
M_linear = np.linalg.pinv(generate_linear_matrix(4))

def correct_pred(pred_ball):
    v = pred_ball[1:] - pred_ball[:-1]
    v_neg = np.where(v[:, 0] < 0)[0] + 1
    v_neg_diff = np.where(v_neg[1:] - v_neg[:-1] > 5)[0] + 1
    if len(v_neg_diff) == 0:
        return pred_ball
    
    i = v_neg[v_neg_diff[0]]
    n = len(pred_ball)-i+4
    segment = pred_ball[i-4:i]
    correction_x = generate_linear_matrix(n)[4:] @ M_linear @ segment[:, 0]
    correction_y = generate_linear_matrix(n)[4:] @ M_linear @ segment[:, 1]
    correction_z = generate_quad_matrix(n)[4:] @ M_quad @ segment[:, 2]
    pred_ball[i:, 0] = correction_x
    pred_ball[i:, 1] = correction_y
    pred_ball[i:, 2] = correction_z
    
    return pred_ball

def compute_conformal_quantiles(residuals, spatial_axis=0, alpha=0.10):
    quantiles = []
    max_t = max(len(r) for r in residuals)
    for t in range(max_t):
        r = np.array([residuals[i][t][spatial_axis] for i in range(len(residuals)) if len(residuals[i]) > t])
        n = len(r)
        q = int(np.ceil((1-alpha)*(n+1)))
        try:
            quantiles.append(np.partition(r, q-1)[q-1])
        except Exception as e:
            return quantiles
    return quantiles

def test_extreme_cases(quantiles_y):
    random_seed = 1
    random.seed(random_seed)
    np.random.seed(random_seed)
    torch.manual_seed(random_seed)

    prompt_size = -7
    loader = CombinedDataset("data/recons", "data/recons_lab", "data/recons_test_conformal", "data/recons_lab_test", val_split=0.05, constant_fps=True)
    models = [load_model(f'models/ensemble{ENS_NUMBER}/best_model_{i}.pth', device) for i in range(NUM_MODELS)]

    dataset = loader.youtube_test_dataset
    mask = loader.youtube_mask
    print("Dataset size:", len(dataset))
    num_samples = len(dataset)
    cases = [0,0,0,0,0,0]
    for i in range(min(len(dataset), num_samples)):
        # print(f"Processing Sample {i}.")
        for hit_time_idx in range(len(dataset.hit_times[i]) // 2):                
            preds = []
            
            sample = dataset[i]
            sample = sample.unsqueeze(0)
            sample = sample.to(device)
            batch, token_mask = sample[:, :, :TOKEN_DIM], sample[:, :, TOKEN_DIM:]
            fps = round(batch[0, 0, -1].item() * 100.0)
            generation_length = batch.shape[1]

            # Apply the mask
            token_mask *= mask.to(device)
            hit_times = dataset.hit_times[i]
            if hit_time_idx is not None:
                ht = hit_times[2*hit_time_idx]
                generation_length = round(hit_times[2*hit_time_idx+1] / (100 / fps)) + 1
                
            batch = batch[:, :generation_length]
            batch = batch * (dataset.std + 1e-8) + dataset.mean
            true_ball = batch[0, :, FORMAT_RANGES["b"][0]:FORMAT_RANGES["b"][1]]
            
            if abs(true_ball[-1][1]) < 0.762:
                continue
            else:
                for model in models:
                    predicted_sequences, fps, prompt_start_idx = generate(
                        model, 
                        dataset, 
                        i,
                        mask, 
                        prompt_size, 
                        device,
                        1, 
                        use_mask_on_generation=True,
                        verbose=False,
                        hit_time_idx=hit_time_idx
                    )
                    predicted_sequences = predicted_sequences[:, prompt_start_idx:]
                    predicted_sequences = predicted_sequences * (dataset.std + 1e-8) + dataset.mean
                    pred_ball = predicted_sequences[1][:, FORMAT_RANGES["b"][0]:FORMAT_RANGES["b"][1]]
                    pred_ball = pred_ball.numpy()
                    preds.append(pred_ball)
                
                true_ball = predicted_sequences[0][:, FORMAT_RANGES["b"][0]:FORMAT_RANGES["b"][1]]
                true_ball = true_ball.numpy()
                
                preds = np.array(preds)
                mean_pred_ball, std_pred_ball = preds.mean(axis=0), preds.std(axis=0)
                t = np.arange(0, len(std_pred_ball)) + 1
                
                eps = 0.016
                t = len(std_pred_ball)-1
                if len(quantiles_y) > t-1:
                    width = quantiles_y[t-1] * (std_pred_ball[t-1][1] + eps*t)
                    center = mean_pred_ball[t-1][1]
                    true_pos = true_ball[t-1][1]
                    l, r = [center-width, center+width]
                    l_clip, r_clip = [max(l, -0.75), min(r, 0.75)]
                    if true_pos > 0:
                        if abs(r_clip + l_clip) < 0.5:
                            print("Predicted Central")
                            cases[1] += 1
                        elif abs(r_clip) < abs(l_clip):
                            if true_pos < 0:
                                print("True Left")
                                cases[2] += 1
                            else:
                                print("False Left")
                                cases[3] += 1
                        elif abs(r_clip) > abs(l_clip):
                            if true_pos > 0:
                                print("True Right") 
                                cases[4] += 1
                            else:
                                print("False Right")                
                                cases[5] += 1
    return cases
            
def compute_conformal_quantiles_along_all_axes(residuals, alpha=0.10):
    quantiles_x = compute_conformal_quantiles(residuals, spatial_axis=0, alpha=alpha)
    quantiles_y = compute_conformal_quantiles(residuals, spatial_axis=1, alpha=alpha)
    quantiles_z = compute_conformal_quantiles(residuals, spatial_axis=2, alpha=alpha)
    return quantiles_x, quantiles_y, quantiles_z
    
def compute_residuals():
    random_seed = 1
    random.seed(random_seed)
    np.random.seed(random_seed)
    torch.manual_seed(random_seed)

    prompt_size = -7
    loader = CombinedDataset("data/recons", "data/recons_lab", "data/recons_test", "data/recons_lab_test", val_split=0.05, constant_fps=True)
    models = [load_model(f'models/ensemble{ENS_NUMBER}/best_model_{i}.pth', device) for i in range(NUM_MODELS)]

    dataset = loader.youtube_test_dataset
    mask = loader.youtube_mask
    print("Dataset size:", len(dataset))
    num_samples = len(dataset)
    residuals = []
    for i in range(min(len(dataset), num_samples)):
        print(f"Processing Sample {i}.")
        for hit_time_idx in range(len(dataset.hit_times[i]) // 2):                
            preds = []
            for model in models:
                predicted_sequences, fps, prompt_start_idx = generate(
                    model, 
                    dataset, 
                    i,
                    mask, 
                    prompt_size, 
                    device,
                    1, 
                    use_mask_on_generation=True,
                    verbose=False,
                    hit_time_idx=hit_time_idx,
                    return_ground_truth_seperate=False
                )
                predicted_sequences = predicted_sequences[:, prompt_start_idx:]
                predicted_sequences = predicted_sequences * (dataset.std + 1e-8) + dataset.mean
                pred_ball = predicted_sequences[1][:, FORMAT_RANGES["b"][0]:FORMAT_RANGES["b"][1]]
                pred_ball = pred_ball.numpy()
                correct_pred(pred_ball)
                preds.append(pred_ball)
        
            true_ball = predicted_sequences[0][:, FORMAT_RANGES["b"][0]:FORMAT_RANGES["b"][1]]
            true_ball = true_ball.numpy()
            
            preds = np.array(preds)
            mean_pred_ball = preds.mean(axis=0)
            std_pred_ball = preds.std(axis=0)
            t = np.arange(0, len(std_pred_ball)) + 1
            
            eps = 0.016
            residuals.append(abs(mean_pred_ball - true_ball) / (std_pred_ball + eps*t[:, np.newaxis]))        
        
    return residuals

def test_conformal_quantiles(quantiles):
    random_seed = 1
    random.seed(random_seed)
    np.random.seed(random_seed)
    torch.manual_seed(random_seed)

    prompt_size = -7
    loader = CombinedDataset("data/recons", "data/recons_lab", "data/recons_test_conformal", "data/recons_lab_test", val_split=0.05, constant_fps=True)
    models = [load_model(f'models/ensemble{ENS_NUMBER}/best_model_{i}.pth', device) for i in range(NUM_MODELS)]

    dataset = loader.youtube_test_dataset
    mask = loader.youtube_mask
    print("Dataset size:", len(dataset))
    num_samples = len(dataset)
    residuals = []
    for i in range(min(len(dataset), num_samples)):
        print(f"Processing Sample {i}.")
        for hit_time_idx in range(len(dataset.hit_times[i]) // 2):                
            preds = []
            for model in models:
                predicted_sequences, fps, prompt_start_idx = generate(
                    model, 
                    dataset, 
                    i,
                    mask, 
                    prompt_size, 
                    device,
                    1, 
                    use_mask_on_generation=True,
                    verbose=False,
                    hit_time_idx=hit_time_idx
                )
                predicted_sequences = predicted_sequences[:, prompt_start_idx:]
                predicted_sequences = predicted_sequences * (dataset.std + 1e-8) + dataset.mean
                pred_ball = predicted_sequences[1][:, FORMAT_RANGES["b"][0]:FORMAT_RANGES["b"][1]]
                pred_ball = pred_ball.numpy()
                preds.append(pred_ball)
        
            true_ball = predicted_sequences[0][:, FORMAT_RANGES["b"][0]:FORMAT_RANGES["b"][1]]
            true_ball = true_ball.numpy()
            
            preds = np.array(preds)
            mean_pred_ball = preds.mean(axis=0)
            std_pred_ball = preds.std(axis=0)
            t = np.arange(0, len(std_pred_ball)) + 1
            
            eps = 0.016
            residuals.append(abs(mean_pred_ball - true_ball) / (std_pred_ball + eps*t[:, np.newaxis]))        
        
    counts = [0, 0, 0, 0]
    contained = [0, 0, 0, 0]
    for r in residuals:
        for t in range(len(r)):
            in_all = 0
            if t < len(quantiles[0]):
                counts[0] += 1
                in_it = int(r[t][0] < quantiles[0][t])
                in_all += in_it
                contained[0] += in_it
            if t < len(quantiles[1]):
                counts[1] += 1
                in_it = int(r[t][1] < quantiles[1][t])
                in_all += in_it
                contained[1] += in_it
            if t < len(quantiles[2]):
                counts[2] += 1
                in_it = int(r[t][2] < quantiles[2][t])
                in_all += in_it
                contained[2] += in_it
            if in_all == 3:
                contained[3] += 1
            if t < min(len(quantiles[0]), len(quantiles[1]), len(quantiles[2])):
                counts[3] += 1
    
    performance = [cont/cnt for cont, cnt in zip(contained, counts)]
    return performance

def test_conformal_volumes(quantiles):
    random_seed = 1
    random.seed(random_seed)
    np.random.seed(random_seed)
    torch.manual_seed(random_seed)
    
    max_t = 25
    quantiles = np.array(quantiles)

    prompt_size = -7
    loader = CombinedDataset("data/recons", "data/recons_lab", "data/recons_test_conformal", "data/recons_lab_test", val_split=0.05, constant_fps=True)
    models = [load_model(f'models/ensemble{ENS_NUMBER}/best_model_{i}.pth', device) for i in range(NUM_MODELS)]

    dataset = loader.youtube_test_dataset
    mask = loader.youtube_mask
    print("Dataset size:", len(dataset))
    num_samples = len(dataset)
    residuals = []
    for i in range(min(len(dataset), num_samples)):
        print(f"Processing Sample {i}.")
        for hit_time_idx in range(len(dataset.hit_times[i]) // 2):                
            preds = []
            for model in models:
                predicted_sequences, fps, prompt_start_idx = generate(
                    model, 
                    dataset, 
                    i,
                    mask, 
                    prompt_size, 
                    device,
                    1, 
                    use_mask_on_generation=True,
                    verbose=False,
                    hit_time_idx=hit_time_idx
                )
                predicted_sequences = predicted_sequences[:, prompt_start_idx:]
                predicted_sequences = predicted_sequences * (dataset.std + 1e-8) + dataset.mean
                pred_ball = predicted_sequences[1][:, FORMAT_RANGES["b"][0]:FORMAT_RANGES["b"][1]]
                pred_ball = pred_ball.numpy()
                preds.append(pred_ball)
        
            true_ball = predicted_sequences[0][:, FORMAT_RANGES["b"][0]:FORMAT_RANGES["b"][1]]
            true_ball = true_ball.numpy()
            
            preds = np.array(preds)
            mean_pred_ball = preds.mean(axis=0)
            std_pred_ball = preds.std(axis=0)
            t = np.arange(0, len(std_pred_ball)) + 1
            
            eps = 0.016
            stds = 2*(std_pred_ball + eps*t[:, np.newaxis])
            N = min(len(stds), max_t)
            stds = stds[:N] * quantiles.T[:N]
            volumes = stds[:, 0] * stds[:, 1] * stds[:, 2]
            volumes = np.concatenate((stds, volumes[:, np.newaxis]), -1)
            residuals.append(volumes)
    
    totals = [[0,0,0,0] for _ in range(max_t)]
    counts = [[0,0,0,0] for _ in range(max_t)]
    
    for v in residuals:
        for t in range(len(v)):
            x_area, y_area, z_area, vol = v[t]
            totals[t][0] += x_area
            totals[t][1] += y_area
            totals[t][2] += z_area
            totals[t][3] += vol
            counts[t][0] += 1
            counts[t][1] += 1             
            counts[t][2] += 1             
            counts[t][3] += 1             
    performance = [[ttl/cnt for ttl, cnt in zip(totals[t], counts[t])] for t in range(max_t)]
    return performance

"""
Without Ensemble

Quantiles
80% Coverage
[2.794973980875172, 2.4183878501602245, 2.308631111948988, 2.201442786864842, 2.2278917654455497, 3.5192017064652217, 4.0080200032568065, 4.143678186608964, 3.831427641371376, 3.6723709996714495, 3.4301421395830585, 3.250508429614908, 3.0918015814493813, 2.9960925944219357, 2.9292650370989595, 2.7050339865094974, 2.50338977708537, 2.284333169204655, 2.471415843718345, 2.5585139230974754, 2.714311530048811, 2.6789747244522712, 2.600804764825745, 2.786077585490674, 2.9628191065899343, 3.6899520212620303, 4.262021376587812, 4.790844861652443, 5.335254520920847, 6.009237521655616, 6.060493154858363, 5.771588401784387, 5.227607350421368, 7.495942033100287, 6.4010492949403766, 6.93202455879478, 4.7584384551936365, 5.268688556633441], 
[1.1396958965293191, 1.2000944021195274, 1.3335177661040962, 1.4640632322065419, 1.6438476538106803, 1.7741240783272505, 1.6331235512970275, 1.625402773220219, 1.6831415098340756, 1.7572455697626752, 1.854936320358371, 1.916151475716203, 1.9004654562883843, 1.9271389127039158, 1.823301052467314, 1.8042513775723727, 1.7081206270536364, 1.6812217313461078, 1.6439116266548794, 1.5960494048940153, 1.5955279216930833, 1.6716771032048179, 1.7005027725798554, 1.7477810841944057, 1.7849301027431113, 1.9686368465743755, 2.101002864818353, 2.198922771910035, 2.0061855842810017, 2.008831700440755, 1.5797930727641802, 1.7077612951471897, 2.0050923772547504, 1.9178739865506589, 1.699896827550782, 1.449688878063444, 1.3512657575201763, 1.2541344764723636], 
[0.42945479841387246, 0.5839049461913922, 0.7285295875254968, 0.8350792877160392, 0.9276252517322559, 1.03391532888279, 0.8379914637642365, 0.7195527721416745, 0.651978306272578, 0.6209656666200186, 0.6204518970289522, 0.6136350237595679, 0.6013032463241695, 0.5682376829969479, 0.5626149551443966, 0.5642469182592178, 0.5355399020768481, 0.5003862933349004, 0.48661339543209475, 0.5058517289015716, 0.5392050811966076, 0.5609965014525076, 0.5854374758189259, 0.6071039671118375, 0.6268887509128551, 0.6991714824071289, 0.796441736221754, 0.8444568458444107, 0.8309367122905247, 0.8818908308290879, 0.8538537795250947, 0.9009375136779815, 0.9946994167433449, 1.1758148131473922, 1.957624850405378, 1.809587339043556, 1.6932988573921604, 1.6054184249473167] 
85% Coverage
[3.2625247721962194, 2.858074406322141, 2.725354139327972, 2.659524753167254, 2.5965764474292814, 4.006324676463224, 4.593684465023669, 4.766688842908378, 4.391343560460799, 4.111522041696371, 3.9844847591672594, 3.714481029658086, 3.599866972248926, 3.521052754965106, 3.412999303762473, 3.227738489529874, 2.9317224210299084, 2.704039154491604, 2.821848316163886, 3.0848731909328513, 3.300186738508289, 3.42045762722414, 3.3191466641690144, 3.6049360331663447, 3.7832613779741813, 4.504780061145435, 4.656406465165415, 5.357522718059655, 5.85219824742686, 6.770129997621285, 6.162030229607395, 6.760835876934195, 7.106635915639684, 8.590609028927227, 6.4010492949403766], 
[1.3426437221204095, 1.3951207460475514, 1.595663406749032, 1.734328089461062, 1.8747766038167106, 2.070411342778176, 1.8560531994301512, 1.797575809160291, 1.9416207946691941, 2.0648251352452256, 2.09465981672934, 2.1558591738194894, 2.171083518295312, 2.0890364402892305, 2.027081903652852, 1.9861082078863677, 1.9121553917374563, 1.8728857267730352, 1.8728115858042966, 1.8118684572705483, 1.7869692822172627, 1.8361187776355785, 1.992076738538793, 2.0231834188148197, 2.0386134346756988, 2.165836303198121, 2.484721171979535, 2.5519862609238206, 2.539340669157555, 2.5730297967622846, 1.8908110139054486, 2.002863818689043, 3.228680542753753, 3.5390716181146504, 1.699896827550782], 
[0.5539078686076226, 0.7866026604021539, 0.9069978386615357, 0.9948437524087087, 1.079231830988428, 1.1942563074642139, 0.9758795745548103, 0.8425451644606388, 0.745553856172968, 0.7203878312808443, 0.708314492340485, 0.703612428799845, 0.6748185916068592, 0.6539247633477354, 0.644334074647128, 0.6493597246813435, 0.6314492113113083, 0.5657636921799364, 0.5736499578113671, 0.5751962104953455, 0.6214319580667407, 0.6449641542935393, 0.6545500477051899, 0.7434672335586677, 0.7565638974939037, 0.8290327653723077, 0.8930242301838998, 0.9534260613004484, 0.9332487043123503, 1.1118305589831674, 1.0276738986964116, 1.0961804667317852, 1.365415592873898, 2.12048233326853, 1.957624850405378] 
90% Coverage
[3.94609390853045, 3.5527766993813725, 3.271554442102554, 3.077887385834685, 3.2669295571767565, 4.7905853586428355, 5.390542187470196, 5.484983795369403, 5.162521761927611, 4.857706369292473, 4.611752506798668, 4.464832738150172, 4.161582309882825, 4.11712896342361, 3.957634110850425, 3.6936754902910183, 3.472020013656633, 3.35524222239807, 3.3015708837384494, 3.7112501226609385, 4.034979858487137, 4.5204205591578965, 4.471245685292971, 4.743040810260859, 4.7564709536962715, 5.087152943385897, 5.677201337941838, 6.159864742583762, 7.015710073402662, 7.147100467417866, 6.861254053187748, 7.0075260373814015, 9.892255522201351, 8.590609028927227], 
[1.6360977621400936, 1.757388378335163, 1.905057080513151, 2.063567760690858, 2.2277482585486545, 2.5652208317764242, 2.20413711568492, 2.149733418411481, 2.2616290105583303, 2.3234398156266463, 2.4093347778672416, 2.404945245142422, 2.4341405142386288, 2.3870230046941354, 2.3071728695164175, 2.268861308628992, 2.2217556748269582, 2.1212324585868285, 2.1462601684219034, 2.08452649325928, 2.079846054764331, 2.1446232433371675, 2.2371643967019144, 2.356542354494538, 2.3789050247126258, 2.532810027212895, 2.704843186334377, 2.824079904879487, 2.6483679306426184, 2.678703724931979, 2.4128604722861238, 3.0493126289535306, 4.249426618705741, 3.5390716181146504], 
[0.7925818793656364, 1.0500862391867802, 1.1360961830753358, 1.2865393068220363, 1.3272936187724405, 1.4318616780752402, 1.1405250524733752, 0.9894465963031004, 0.913201338265647, 0.8563112221440933, 0.8352301239202188, 0.8279087535587454, 0.7957472572504313, 0.7722592549717702, 0.7436376335051551, 0.7567287614612208, 0.7598456824506903, 0.6758333135524851, 0.6760281245373501, 0.6868512399632515, 0.7415811179088041, 0.7131620245305453, 0.7776695752004521, 0.8542611232618741, 0.8972930830575426, 0.9521577279833524, 1.0538454228599838, 1.0347946841656634, 1.1203275822023662, 1.2053140032127498, 1.210367383821245, 1.5732523387869537, 2.3213470882736216, 2.12048233326853] 

Test Coverage
80%
[0.8007402837754473, 0.7953115360888341, 0.8212214682294879, 0.5679210363972856]
85%
[0.8523092121511484, 0.8482341318844159, 0.8705853297110397, 0.6683131637441344]
90%
[0.8978381717109327, 0.8998147004323657, 0.9171093267449043, 0.7704756022235948]

Volumes
80%
[[0.08943916738800527, 0.03647026868893783, 0.013742553549244025, 4.482642954909047e-05], [0.15477682241025512, 0.07680604173565013, 0.037369916556249425, 0.00044424591024290905], [0.22162858674710184, 0.12801770554599304, 0.06993884040244706, 0.0019843315775779653], [0.2817846767187006, 0.18740009372243716, 0.10689014882765252, 0.005644491953282315], [0.35646268247128865, 0.26301562460970757, 0.14842004027715966, 0.013915158735204438], [0.6756867276413279, 0.34063182303883316, 0.19851174314549644, 0.045689542572247915], [0.8977964807295234, 0.36581967549053207, 0.18771008788318955, 0.06164992773517853], [1.0607816157718897, 0.41610310994437394, 0.18420550966826818, 0.08130730423347997], [1.1034511607149529, 0.4847447548322139, 0.18776975220650152, 0.10043656878543311], [1.1751587198948565, 0.5623185823240539, 0.19870901331840674, 0.13130961553766748], [1.2074100331332296, 0.6529375847661424, 0.21839906775419135, 0.1721778296145763], [1.2481952369721363, 0.7358021666750246, 0.2356358491236726, 0.21641379813109898], [1.2861894578829378, 0.790593629815968, 0.2501421504708539, 0.254357844194729], [1.3422494823010316, 0.8633582328913572, 0.2545704819826302, 0.2950070024114798], [1.4060472178075005, 0.8751845051843147, 0.2700551784693095, 0.33231659932347646], [1.3849774010928537, 0.9237767053170549, 0.2888944221487183, 0.369614372346338], [1.3618440387344353, 0.9292176211171755, 0.29133370672980513, 0.36866808710661647], [1.315775905461877, 0.9683837172553588, 0.2882225049609004, 0.36724618764568967], [1.5026208329807627, 0.9994982690061603, 0.2958609444227136, 0.4443437658031294], [1.6374489107823822, 1.021471619132171, 0.3237451064970062, 0.5414985223985731], [1.824017348192798, 1.072194763377752, 0.362345814564121, 0.7086403795358617], [1.8859982060143936, 1.176860680656195, 0.39494153702256624, 0.876595305397803], [1.914192306911752, 1.2515700406187755, 0.43088198220272905, 1.032283674732752], [2.139707585656842, 1.342295872661307, 0.46625584674189224, 1.339143050706451], [2.37025528527195, 1.427944082194487, 0.501511000730283, 1.6974101249427884]]
85%
[[0.10440079271027952, 0.04296459910785283, 0.017725051795443925, 7.950639702008004e-05], [0.18291676200461712, 0.08928772774704263, 0.0503425702657375, 0.0008222060359584157], [0.26163399737548415, 0.15318368704790689, 0.08707179251150797, 0.0034896685572408212], [0.34041916840540704, 0.2219939954510154, 0.12734000030831524, 0.009623212605097811], [0.41545223158868727, 0.29996425661067544, 0.17267709295814782, 0.021519160886117352], [0.7692143378809471, 0.39751897781340756, 0.22929721103312803, 0.0701138814713139], [1.0289853201653043, 0.4157559166723559, 0.2185970247002772, 0.09351727942379993], [1.220272343784541, 0.4601794071450343, 0.21569156210192372, 0.12112034648927054], [1.2647069454126985, 0.5591867888647294, 0.2147195105778136, 0.15185123016757127], [1.315687053342845, 0.6607440432784702, 0.23052410600986792, 0.200402070489092], [1.4025386352268605, 0.7373202554887262, 0.24932670130385284, 0.25783376446937833], [1.4263607153886948, 0.8278499227466808, 0.27018717265913905, 0.3190404200075249], [1.4975446604555591, 0.9031707436108521, 0.2807245341084547, 0.37969074717480256], [1.5774316342243566, 0.9358883252495701, 0.2929582939797835, 0.43249428556113023], [1.6382396658059846, 0.9729993137533642, 0.3092803558306227, 0.49299476470910286], [1.6526021066392877, 1.0168874024378172, 0.33247217903684506, 0.5587229091942159], [1.59485699704027, 1.040212533105184, 0.3435083709533547, 0.5698770336815949], [1.557526552987159, 1.078782178621276, 0.3258798866956445, 0.5475537773138202], [1.7156837762276484, 1.1386694441690113, 0.3487791743493127, 0.6813738411939128], [1.974318842197022, 1.1595958126531511, 0.3681255747170217, 0.8427910575561814], [2.217725488277565, 1.2008433576500008, 0.4176022758208501, 1.1121337097290525], [2.4080021695658007, 1.2926276194554502, 0.4540547646226527, 1.4133136139974167], [2.4428919448283946, 1.466168479564552, 0.4817488351110199, 1.7254755481472646], [2.7685908734717573, 1.5538048656497834, 0.5709828353730582, 2.456282493330861], [3.0266091023793478, 1.630890747740562, 0.6052511179951237, 2.9875611488655442]]
90%
[[0.12627500507297462, 0.05235512838848307, 0.025362620139700625, 0.00016767593656945304], [0.22737770876040933, 0.11247285621345067, 0.0672055193079543, 0.0017187018768768062], [0.3140692264418448, 0.18288547972926364, 0.10906523357523211, 0.006264565356748092], [0.39396958538683907, 0.2641366733684276, 0.16467703127322142, 0.017136590877128592], [0.5227087291482833, 0.3564397213677821, 0.21236697900359047, 0.039566973982621], [0.9197923888594305, 0.4925223997010733, 0.27491744219044384, 0.12454264730860898], [1.2074814499933342, 0.49372671391341966, 0.2554776117540351, 0.15230702716279707], [1.40415585161457, 0.5503317551133412, 0.2532983286535951, 0.19573667716149137], [1.4868062674351499, 0.6513491550408032, 0.2630019854205053, 0.25469901431964564], [1.5544660381735875, 0.7435007410005271, 0.2740195910861118, 0.31669722477253603], [1.6233368823931216, 0.8480858418092748, 0.294001003619915, 0.4047597154873299], [1.7144957714496758, 0.9234989741346973, 0.31791696136656006, 0.5033690793954387], [1.7312182409112558, 1.0126024539232652, 0.3310308590161808, 0.5803089596780903], [1.8444737756137781, 1.0693863061029696, 0.34597214622735345, 0.6824144888591085], [1.8996643732082168, 1.1074429773678829, 0.35694606408247603, 0.7509324103355705], [1.891161851028991, 1.1616569900180467, 0.3874451258681429, 0.8511709841488196], [1.8887788874292166, 1.2086350871058613, 0.4133560512531746, 0.9436275613313331], [1.9326195201012952, 1.2218298961460088, 0.3892799886062327, 0.9192194137727941], [2.007355097312983, 1.3049261824005132, 0.41102509971871026, 1.076659789469773], [2.3752000785029956, 1.3340969556859368, 0.43958479357648195, 1.3929330811159786], [2.7115064649033656, 1.3976565488016275, 0.49834251123471507, 1.8885959079442698], [3.1823760736471622, 1.509814763309371, 0.502066065269503, 2.4123262162540495], [3.2908368243756208, 1.6465529959726057, 0.5723648073475325, 3.10138001914676], [3.642655342280345, 1.809824528251803, 0.6560725426651202, 4.3252021854749065], [3.805176762957013, 1.9031240197701031, 0.717834466446035, 5.198358579090954]]
"""

"""
With Ensemble (W=5)

Quantiles
80% Coverage
[1.234841173789549, 1.27020076678004, 1.2335592555066957, 1.2097133888982154, 1.1982093175903186, 1.4758818435553607, 1.7061486396991006, 1.746080065549496, 1.6989200243756482, 1.6280563224180247, 1.577824968973005, 1.5523599676049202, 1.5020366483559853, 1.4885455192072548, 1.4793043822333944, 1.4467284405229999, 1.3378870162983008, 1.2731490755058104, 1.1776603540643944, 1.1427126060422645, 1.1155522808155385, 1.114368812881633, 1.1355712623135203, 1.1245679033420877, 1.174138074106543, 1.2319582035880257, 1.4193655901904128, 1.4660957039404938, 1.6062167947271289, 1.8757651018667292, 1.8599995189349765, 1.817165464086606, 1.8419079308036712, 1.836100258244134], 
[0.6396408384744917, 0.7066797436610918, 0.8198105450505352, 0.9161575130763241, 1.010041007954529, 1.1407513308411177, 1.0214558537381695, 1.0582971665821648, 1.1614577773970896, 1.2481266602248557, 1.3142350475139408, 1.3514978713840007, 1.3500274188982828, 1.3309159241214883, 1.2739919790968672, 1.2136055289651522, 1.135810473455152, 1.0927416048337022, 1.020180661684438, 0.9978839600542716, 0.9856553442246412, 0.9728402819640461, 0.9797202904027732, 0.9969333727292692, 1.0041351078791672, 1.0179471294678066, 1.0171175495835776, 0.9845725984445068, 1.0544662887603704, 1.1712923904674364, 1.068403101711832, 1.1365077911071828, 1.1236866988302379, 1.0391272712086883], 
[0.3253470374528641, 0.4510884479639476, 0.5639895941500868, 0.6406257843199484, 0.7202302469991195, 0.823076008452084, 0.6070896930473023, 0.544723042362522, 0.512822297903869, 0.4894815207041073, 0.4854030506479095, 0.48509378803672043, 0.4667680332663306, 0.44437964330832774, 0.45252712066022344, 0.4490608983224761, 0.44614435918515755, 0.41828655959351563, 0.3853476613839187, 0.37966438310791234, 0.390819650412283, 0.4099841132772017, 0.44693105785452286, 0.4870514932254664, 0.5575886581980891, 0.600262337823033, 0.6801524206944605, 0.7774237338856157, 0.8166783745941634, 0.9038901299850856, 0.9581163683451421, 0.9129193445229197, 0.9306508761068445, 0.9666145126566881] 

85% Coverage
[1.4413868749807062, 1.443891338487522, 1.4259729262843222, 1.4100970127319434, 1.3828740395916277, 1.707768393437788, 1.9745400133270832, 2.0078195309541114, 1.9083580096684092, 1.885500704390635, 1.8187640274543608, 1.7579935699143623, 1.7173908813365362, 1.7009101082154314, 1.6715816156605778, 1.61290752465446, 1.5194540362738713, 1.4291331107827643, 1.3674529670318802, 1.3274110607994705, 1.2862556207149027, 1.299595168469526, 1.2744079245414146, 1.281233416737543, 1.3308655676133445, 1.433287918193609, 1.5428261160740573, 1.6749918508298711, 1.7028837893065456, 1.8843216474370121, 2.322996183873063, 1.8486106968479856, 2.37990055172976, 1.836100258244134], 
[0.7576080095591078, 0.8639516596483199, 0.9652562573597373, 1.0580350256311817, 1.1762157739739192, 1.336021632717487, 1.149952523596564, 1.2028722433040984, 1.315343109345028, 1.4077472281111212, 1.4752008390251188, 1.5188088051462412, 1.509195847671136, 1.496212899169868, 1.4317042592002547, 1.3549013708401423, 1.27512183735148, 1.226043374048814, 1.155042138199697, 1.1252106986841575, 1.0883252876750298, 1.08669096540102, 1.0768037666233718, 1.0846593069221806, 1.1010926821501654, 1.1420852566057051, 1.1138349761068183, 1.1868479912745065, 1.2847617539685012, 1.324059018581373, 1.1614976555063585, 1.2586661080100536, 1.1629843931677748, 1.0391272712086883], 
[0.40550781640637296, 0.5742079440870748, 0.6812971397118697, 0.7661444710282662, 0.8415379903185687, 0.9402827848608202, 0.7080130071480693, 0.6057326442700078, 0.5746672670870012, 0.5615233440799146, 0.5710602636760211, 0.561112864746084, 0.5312603983613653, 0.5117987256840801, 0.5157448388330336, 0.5150762613446283, 0.5113235767753378, 0.48560122547970874, 0.4512521915857473, 0.4488816650213105, 0.4557234478722744, 0.45870182822009503, 0.5162635518891237, 0.565577248774426, 0.6239351552541345, 0.683423214824455, 0.7606941273692029, 0.8514389244445777, 0.8902068848783098, 0.9571187223630979, 1.0459959294356345, 0.918422908633598, 0.9791553810014163, 0.9666145126566881] 

90% Coverage
[1.6912140211717002, 1.6983389363336696, 1.7219497053460902, 1.6617647633338837, 1.6162125723016814, 2.0983197108330303, 2.3992316429415124, 2.4046158304524257, 2.310718379035098, 2.1848657552908675, 2.0884036989251347, 2.0448901486268474, 1.9898140771756279, 2.0118688492090633, 1.9778320784990873, 1.895862369316119, 1.7719447657259235, 1.6634178571350313, 1.5948933154869078, 1.4951791190779573, 1.4539290565047849, 1.468005034124614, 1.54189564470258, 1.5767212735009606, 1.5807832612255517, 1.5821378864238878, 1.7799809025134745, 1.928132196891557, 1.914021595890003, 2.379203028447036, 3.426963229966351, 2.3951982989009077, 2.37990055172976], 
[0.9449761899617349, 1.0544375558066001, 1.1712835865819895, 1.285904822758112, 1.404577775478893, 1.5863364586700244, 1.3604752827650994, 1.4052700683678763, 1.529678939555617, 1.6188264276810014, 1.6646064437591686, 1.6984352659558357, 1.699137264687194, 1.669300574289486, 1.5994557033658137, 1.5423788858740894, 1.4522281264456045, 1.3936589511229855, 1.3186553210964413, 1.3048576955807185, 1.2577997778144698, 1.2205934509775416, 1.2209775408589303, 1.2244179944360152, 1.3094507333877639, 1.3084133545394239, 1.3520564833219233, 1.3572696811843505, 1.3814858005925792, 1.6109844722763664, 1.493548608937583, 1.4425591575482146, 1.1629843931677748], 
[0.567158210506784, 0.72726067892113, 0.8290977593988101, 0.9126245090414524, 0.9920911477059298, 1.1146352574332756, 0.8364702675084364, 0.7280933473783366, 0.6773607939603848, 0.6598098257135426, 0.6704074623777657, 0.667954967294232, 0.6225866378191962, 0.591664916113061, 0.6177082225921696, 0.6258795244826466, 0.6022514603988519, 0.573233745704701, 0.5302228282334736, 0.5396665998027608, 0.5485972356617493, 0.5527446549342491, 0.5886219287558977, 0.625630782175302, 0.6892347287965915, 0.8493924541311874, 0.9657804643228504, 1.0202648103003542, 0.9756800061356881, 1.0897412658198664, 1.3495513127454961, 0.981682850921845, 0.9791553810014163]

With Ensemble (W=7)
80% Coverage
[1.093523981478878, 1.129681134427237, 1.2057591304999202, 1.2019227733493114, 1.2074160848996367, 1.1867997514766697, 1.1211077581374984, 1.5118714267373348, 1.5406122196935563, 1.7200708756916954, 1.6672275723833259, 1.601878070549606, 1.5420266040256991, 1.5039021219154571, 1.4773247466036514, 1.4565934164049512, 1.4397710730954023, 1.4175456042788328, 1.3053528678063568, 1.2351462141038516, 1.1685176353412643, 1.1335832563493087, 1.1130492038734454, 1.116483885162204, 1.1275524752801096, 1.1358450362509325, 1.176074612349017, 1.22142820517981, 1.313832186197897, 1.4277971701642074, 1.4851179110406572, 2.061873038442578, 2.2741145779229943, 2.161448798398028, 2.5964844024667673, 2.6011802095516976], 
[0.5357354958875526, 0.5593486184380192, 0.6410911073222672, 0.7168543842144451, 0.7979094421887539, 0.8864563150609727, 0.9433330172499761, 1.0966302777351793, 0.9342135825967516, 0.9392663213709166, 1.0191307487555858, 1.1023090253758006, 1.158392455878503, 1.2076172353824262, 1.2353194941813186, 1.219151075934287, 1.1778968533401408, 1.114906688895349, 1.0595255657299816, 1.0200178091197234, 0.9690482734448707, 0.9460373338118815, 0.9265577558169675, 0.9300664881736176, 0.9627270557786055, 0.9775245902885478, 0.998270588645502, 1.0609489233719196, 1.005681571971124, 1.0406801036218616, 1.1367757031969887, 1.270667407362337, 1.2671432854659033, 1.2556236475515792, 1.1624730602163933, 1.1605309388181868], 
[0.21959534037517042, 0.2650302140878927, 0.3406818651984706, 0.4203143557898404, 0.5000782325800521, 0.585622588683351, 0.634013205489083, 0.7607698551063555, 0.566154567578934, 0.4900633029070012, 0.45110316897316777, 0.4433517835172919, 0.44737201518818265, 0.4565456861258582, 0.42576995523641203, 0.40554332512887503, 0.3949597209476958, 0.413014088894424, 0.40730533864717827, 0.3865298975454095, 0.3647135998490343, 0.37057865798539635, 0.37749293911708526, 0.37975452921561714, 0.4189049299576749, 0.4612925808912886, 0.5145175331214664, 0.5591338187588585, 0.6609201900860411, 0.7271812330176242, 0.7651853708832222, 0.9790708995104596, 1.0931858516496342, 1.063620806535662, 1.2532439294251363, 1.5693589365850948] 

85% Coverage
[1.2940979910649653, 1.3578839402290792, 1.416330044232463, 1.4096028036391395, 1.4042502504792143, 1.3217428876562651, 1.3310634681022298, 1.7824959383999717, 1.8058662309996838, 1.9562780837453615, 1.8916023508336308, 1.834897063633948, 1.7894967716394483, 1.7141808042538358, 1.6995662031268857, 1.6780030251006401, 1.6569021041091196, 1.6012900431999655, 1.5027024004073093, 1.3948354362171806, 1.3068402073943644, 1.2906296825740469, 1.283539588514659, 1.2811624039052303, 1.3160637307799679, 1.329121391920035, 1.3649004062033028, 1.3816887810529044, 1.5520804173131166, 1.6013692734470046, 1.7305877448611875, 2.190120201989411, 2.5873291861618126, 2.5905082952876897, 3.006726996703031, 2.6011802095516976], 
[0.6090266700823536, 0.6801030697286836, 0.7611157671594093, 0.8704872645847447, 0.9584607309769979, 1.020201366029445, 1.089012232767275, 1.2703387064500085, 1.0564817920717322, 1.081129801138768, 1.161052944506185, 1.251951447482963, 1.3536641902933835, 1.380738310994904, 1.3855814213917657, 1.3565391901979973, 1.3169139798644955, 1.2649551510421377, 1.161274402773064, 1.1327454981817124, 1.0880474646988092, 1.0664058815031612, 1.0454505614259901, 1.0585389953447593, 1.0722773844658784, 1.0947956221546167, 1.116176089774551, 1.17404979308419, 1.1724923575177182, 1.1910670112408641, 1.2856111384772853, 1.3353338198124292, 1.2944692757922327, 1.3129475762701481, 1.5104953437249686, 1.1605309388181868], 
[0.2595599121472812, 0.34345163880045815, 0.4243086982864101, 0.5128322838764259, 0.5982553971761301, 0.6951305507167177, 0.7510024174505681, 0.8641113055162283, 0.6591587926587992, 0.5653114759094293, 0.5199054502555808, 0.5111241566611299, 0.51290220355998, 0.521847983143516, 0.4860720012812808, 0.4551521008070027, 0.45890456526997586, 0.471964094675431, 0.4671602428300088, 0.4526295905197145, 0.41516790982330554, 0.4298281782676325, 0.4352180167464811, 0.4390955986340088, 0.46907580625061795, 0.5185130115255348, 0.5749966985231808, 0.657121763694654, 0.7728516362842082, 0.8518052916118612, 0.9789783067219581, 1.0784054201357367, 1.343388925678266, 1.3877788834491298, 1.5078803438321868, 1.5693589365850948] 

90% Coverage
[1.542716939945034, 1.6644300538874164, 1.6960834317077982, 1.698711576721159, 1.6664447551466994, 1.5895750129729689, 1.6219112784332343, 2.0906686851297227, 2.1267761005228696, 2.3407181852522285, 2.2727342520818024, 2.118496271776335, 2.0656047649610474, 2.0025458782104377, 1.9550444738001609, 1.967971257624644, 1.9341869374472525, 1.8737686833580423, 1.7403984175920684, 1.6189611960287562, 1.5402485166543054, 1.5200120023884045, 1.4838301242507637, 1.4997528393248802, 1.519706406481963, 1.5382522239183973, 1.6411463126250923, 1.608634882303069, 1.7736124063216139, 1.9255196026808272, 2.0961007523152566, 2.701233343511961, 3.1563250443430806, 3.007812639363857, 3.006726996703031], 
[0.7791645751026381, 0.8414837072623009, 0.9239132769081387, 1.0504018644904736, 1.1291624733976302, 1.191320940357526, 1.2643401286733122, 1.4335230194111335, 1.207262898936403, 1.274584290683756, 1.38581296154073, 1.4506629179957695, 1.51538060675444, 1.5578661782784495, 1.5596452126221896, 1.5353440980408453, 1.4910714084366028, 1.4274887042051292, 1.3713035189083618, 1.3239224225707096, 1.2362307275618392, 1.232595413314884, 1.2096157065573738, 1.2128399334299431, 1.2084790195185675, 1.2141801970099009, 1.262848001313967, 1.2917464386007818, 1.299881263598022, 1.3451879261261497, 1.3436344424271904, 1.4154030781668894, 1.4236308385002214, 1.4809206682483584, 1.5104953437249686], 
[0.3347325301312745, 0.44897733110035554, 0.5518706622868894, 0.6585095992325368, 0.7560512427601501, 0.83470844916534, 0.9085342290411568, 1.033516982697298, 0.7852467518012739, 0.674424539738133, 0.613490675628294, 0.5833077523845154, 0.5952865920844934, 0.5948088698052663, 0.5702765587312701, 0.541711683716907, 0.5394422829346137, 0.5547507175064065, 0.5392308585337575, 0.5397246826186486, 0.5062598373609974, 0.5122123853533951, 0.513111292367044, 0.5230218431332903, 0.5600847109259979, 0.618761202864462, 0.6822749587870801, 0.7831577916538127, 0.9247083879172162, 1.0800710827463302, 1.101028764137419, 1.2307429760891557, 1.4823916075070314, 1.436146145667105, 1.5078803438321868] 


Volumes
80%
[[0.0783630397613664, 0.03607725235318238, 0.014282796361740624, 4.166839904106563e-05], [0.15352979411546708, 0.07659724233258865, 0.0363702002723888, 0.0004430697703498531], [0.23615102768059684, 0.13295036885671727, 0.06597862344747696, 0.0021543262922522], [0.310140776780417, 0.191809856593076, 0.10352422234183722, 0.006423046205641343], [0.3743216210679779, 0.2573917295573993, 0.1451511793113385, 0.014813786342179685], [0.7192125144117085, 0.3404356813088522, 0.21066473944648426, 0.054622393507673096], [0.9302954288482234, 0.35183880620725067, 0.18192860561640944, 0.06372865809072645], [0.9926655161868992, 0.4044732523190824, 0.1737678847051658, 0.0748532097662557], [1.0420613088296875, 0.4903009979272907, 0.1870676371888613, 0.10199680007455408], [1.083849250086551, 0.5691073438161316, 0.20021526823992228, 0.13088696541716188], [1.1139939386784703, 0.6501213137716391, 0.2189826431371453, 0.16707832723657037], [1.1594083109543014, 0.745975626484643, 0.23272156757290027, 0.2111063575708241], [1.2333411138184454, 0.7897693877479323, 0.236142150476195, 0.24083570761608739], [1.306887146092978, 0.8378687903038174, 0.22761138816220403, 0.25961652895426085], [1.3529035266463072, 0.8679574169891234, 0.2422624550864607, 0.29722059428551867], [1.3614984577861853, 0.8935472810132323, 0.25683160671830074, 0.324332770982313], [1.3566446107767778, 0.9066588000750594, 0.25203072720843017, 0.31992533041287163], [1.340867980760936, 0.9560745391764508, 0.2560549703120923, 0.3399725507693381], [1.3996954211848196, 0.9958714763412775, 0.26300340446810855, 0.38096198911723383], [1.5701957205367743, 1.0097887060959039, 0.28308853153372604, 0.46461638964354496], [1.6039793870901833, 1.026164041100772, 0.32452198088267203, 0.5529492429482974], [1.493934892561636, 1.1445727420272147, 0.3432236979555883, 0.6128574667997253], [1.5025294339970285, 1.2414930393206791, 0.3767237162908148, 0.7363297450935967], [1.8397280015005506, 1.4179117145368556, 0.44502310317907534, 1.2236836771510091], [2.235635260707196, 1.4907206640012627, 0.49657027686928734, 1.7703207636192804]]
85%
[[0.09597675907563978, 0.04202167885559222, 0.018031236973720683, 7.504363164130701e-05], [0.17830739548735472, 0.09059949757659053, 0.045387515144078044, 0.0007595426722393383], [0.26412537133692054, 0.1483424835573331, 0.0789761711973919, 0.0032181077886145972], [0.36148903633917323, 0.22138888828841982, 0.12017695673881583, 0.010030935319874592], [0.4435690854496183, 0.2951505305231744, 0.170194516611787, 0.023602413192748375], [0.843129996585382, 0.39462167237695844, 0.23562177496950185, 0.0830189936867499], [1.068560921103857, 0.39077241128266954, 0.20275602999791045, 0.09060791118773513], [1.2016680296931705, 0.45964874314750964, 0.19926915779046792, 0.11808611649620555], [1.202250057494575, 0.547957766604087, 0.21081272459816291, 0.14820762659230258], [1.2241265398067243, 0.6468252785878166, 0.2299349888410722, 0.19295431472848312], [1.2485099592194129, 0.743080884305107, 0.2511224040981284, 0.24544079762750104], [1.3192750706251897, 0.8320750834883172, 0.2638776322679804, 0.30381141236238673], [1.3999133901096281, 0.8982539346921786, 0.2682753834962483, 0.35321975045359594], [1.5181237894507797, 0.9405339248552959, 0.26688559717616556, 0.3969456431796062], [1.5454486719803862, 0.9602762918319167, 0.2830898711421412, 0.43893747371975567], [1.5876114148364229, 0.9882496180744691, 0.3019464071938679, 0.4917545725060065], [1.5956094136594334, 1.0158105946662637, 0.291865901062013, 0.488211321532923], [1.548185211423546, 1.0628202698872422, 0.29280932891571204, 0.4989999738111381], [1.627744354426437, 1.123664870196587, 0.3036021223168592, 0.5770470754362714], [1.7467586407844047, 1.1263529840897035, 0.32048951965641287, 0.6526933654481829], [1.8524266923915917, 1.1701608843772862, 0.3723356838961655, 0.8355007455006951], [1.9061851972248698, 1.2767717741149978, 0.3886876159957348, 0.9878391070409178], [1.7932785704553567, 1.4687028887412974, 0.4316639174030875, 1.1912682341643044], [2.2345418961181074, 1.551428392698816, 0.5073800758771156, 1.854118324489837], [2.9745429585699465, 1.65756658300417, 0.5648395615363158, 2.9791361784920443]]
90%
[[0.11802003457603023, 0.052183025776590425, 0.023814546157036764, 0.0001513478118383808], [0.22515717674727034, 0.11003603750150102, 0.058907039149946126, 0.001511849487577875], [0.3264002704537822, 0.18138956940365314, 0.10260789149036632, 0.006317895351591577], [0.42387142365779434, 0.2700732149339511, 0.1503127470545235, 0.017946540490198712], [0.5497484010921212, 0.35005048729363947, 0.20559430347676264, 0.04190942916086723], [1.018942062831842, 0.47906722660085693, 0.2776282906838014, 0.14351465103147348], [1.3293461666791138, 0.4550490913041944, 0.24495957684981626, 0.15858420144395136], [1.367617821102318, 0.5347533848820466, 0.23656888318341926, 0.1856197076201157], [1.4088485340943204, 0.6329184901697376, 0.24594403601553574, 0.23403468219235637], [1.4366944237898158, 0.7408832615323852, 0.26650332604487986, 0.30064428795199616], [1.4569961084433067, 0.8551042971602852, 0.294183328398167, 0.3861257198279315], [1.5388581166618505, 0.9429974777948535, 0.30556474422822233, 0.4650674955163034], [1.5998779231450442, 1.0333935358619657, 0.3110746523088724, 0.5384942493197936], [1.7602141815302559, 1.1004988672452773, 0.3160462859631238, 0.6377200302773076], [1.8485969869001107, 1.107962440903551, 0.33820266245834346, 0.7237221055164655], [1.8986255873815314, 1.1305005583705934, 0.3634552977399239, 0.8097832450176511], [1.8372839933209983, 1.1779967318651312, 0.3611989346368043, 0.8067741921793367], [1.8150797177697424, 1.213421675482388, 0.3468056655983974, 0.7910911142915772], [1.924955746086048, 1.269900321341561, 0.37125411142843545, 0.9430725296389538], [2.0946495328575794, 1.3260572966808524, 0.4070195551611416, 1.1702452468276203], [2.2272035734550104, 1.401185096962697, 0.41952578030836973, 1.3553131521559103], [2.4943222729789016, 1.4942604876959744, 0.45252150211880415, 1.7612671834770528], [2.577771395265037, 1.5821298247338558, 0.5028843617321226, 2.149001674559142], [2.76942312127275, 1.7409115098652947, 0.5762881378514558, 2.92879848095237], [3.5135999554737207, 1.883997261231317, 0.6355472334533813, 4.500434371603167]]
"""

residuals = compute_residuals()
quantiles = compute_conformal_quantiles_along_all_axes(residuals, alpha=0.2)
x, y, z = quantiles
print("80% Coverage")
print(x, "\n", y, "\n", z, "\n")

quantiles = compute_conformal_quantiles_along_all_axes(residuals, alpha=0.15)
x, y, z = quantiles
print("85% Coverage")
print(x, "\n", y, "\n", z, "\n")

quantiles = compute_conformal_quantiles_along_all_axes(residuals, alpha=0.1)
x, y, z = quantiles
print("90% Coverage")
print(x, "\n", y, "\n", z, "\n")

# quantiles = [
# [2.794973980875172, 2.4183878501602245, 2.308631111948988, 2.201442786864842, 2.2278917654455497, 3.5192017064652217, 4.0080200032568065, 4.143678186608964, 3.831427641371376, 3.6723709996714495, 3.4301421395830585, 3.250508429614908, 3.0918015814493813, 2.9960925944219357, 2.9292650370989595, 2.7050339865094974, 2.50338977708537, 2.284333169204655, 2.471415843718345, 2.5585139230974754, 2.714311530048811, 2.6789747244522712, 2.600804764825745, 2.786077585490674, 2.9628191065899343, 3.6899520212620303, 4.262021376587812, 4.790844861652443, 5.335254520920847, 6.009237521655616, 6.060493154858363, 5.771588401784387, 5.227607350421368, 7.495942033100287, 6.4010492949403766, 6.93202455879478, 4.7584384551936365, 5.268688556633441], 
# [1.1396958965293191, 1.2000944021195274, 1.3335177661040962, 1.4640632322065419, 1.6438476538106803, 1.7741240783272505, 1.6331235512970275, 1.625402773220219, 1.6831415098340756, 1.7572455697626752, 1.854936320358371, 1.916151475716203, 1.9004654562883843, 1.9271389127039158, 1.823301052467314, 1.8042513775723727, 1.7081206270536364, 1.6812217313461078, 1.6439116266548794, 1.5960494048940153, 1.5955279216930833, 1.6716771032048179, 1.7005027725798554, 1.7477810841944057, 1.7849301027431113, 1.9686368465743755, 2.101002864818353, 2.198922771910035, 2.0061855842810017, 2.008831700440755, 1.5797930727641802, 1.7077612951471897, 2.0050923772547504, 1.9178739865506589, 1.699896827550782, 1.449688878063444, 1.3512657575201763, 1.2541344764723636], 
# [0.42945479841387246, 0.5839049461913922, 0.7285295875254968, 0.8350792877160392, 0.9276252517322559, 1.03391532888279, 0.8379914637642365, 0.7195527721416745, 0.651978306272578, 0.6209656666200186, 0.6204518970289522, 0.6136350237595679, 0.6013032463241695, 0.5682376829969479, 0.5626149551443966, 0.5642469182592178, 0.5355399020768481, 0.5003862933349004, 0.48661339543209475, 0.5058517289015716, 0.5392050811966076, 0.5609965014525076, 0.5854374758189259, 0.6071039671118375, 0.6268887509128551, 0.6991714824071289, 0.796441736221754, 0.8444568458444107, 0.8309367122905247, 0.8818908308290879, 0.8538537795250947, 0.9009375136779815, 0.9946994167433449, 1.1758148131473922, 1.957624850405378, 1.809587339043556, 1.6932988573921604, 1.6054184249473167] 
# ]
# res = test_conformal_volumes(quantiles)
# print("80%")
# print(res)

# quantiles = [
# [3.2625247721962194, 2.858074406322141, 2.725354139327972, 2.659524753167254, 2.5965764474292814, 4.006324676463224, 4.593684465023669, 4.766688842908378, 4.391343560460799, 4.111522041696371, 3.9844847591672594, 3.714481029658086, 3.599866972248926, 3.521052754965106, 3.412999303762473, 3.227738489529874, 2.9317224210299084, 2.704039154491604, 2.821848316163886, 3.0848731909328513, 3.300186738508289, 3.42045762722414, 3.3191466641690144, 3.6049360331663447, 3.7832613779741813, 4.504780061145435, 4.656406465165415, 5.357522718059655, 5.85219824742686, 6.770129997621285, 6.162030229607395, 6.760835876934195, 7.106635915639684, 8.590609028927227, 6.4010492949403766], 
# [1.3426437221204095, 1.3951207460475514, 1.595663406749032, 1.734328089461062, 1.8747766038167106, 2.070411342778176, 1.8560531994301512, 1.797575809160291, 1.9416207946691941, 2.0648251352452256, 2.09465981672934, 2.1558591738194894, 2.171083518295312, 2.0890364402892305, 2.027081903652852, 1.9861082078863677, 1.9121553917374563, 1.8728857267730352, 1.8728115858042966, 1.8118684572705483, 1.7869692822172627, 1.8361187776355785, 1.992076738538793, 2.0231834188148197, 2.0386134346756988, 2.165836303198121, 2.484721171979535, 2.5519862609238206, 2.539340669157555, 2.5730297967622846, 1.8908110139054486, 2.002863818689043, 3.228680542753753, 3.5390716181146504, 1.699896827550782], 
# [0.5539078686076226, 0.7866026604021539, 0.9069978386615357, 0.9948437524087087, 1.079231830988428, 1.1942563074642139, 0.9758795745548103, 0.8425451644606388, 0.745553856172968, 0.7203878312808443, 0.708314492340485, 0.703612428799845, 0.6748185916068592, 0.6539247633477354, 0.644334074647128, 0.6493597246813435, 0.6314492113113083, 0.5657636921799364, 0.5736499578113671, 0.5751962104953455, 0.6214319580667407, 0.6449641542935393, 0.6545500477051899, 0.7434672335586677, 0.7565638974939037, 0.8290327653723077, 0.8930242301838998, 0.9534260613004484, 0.9332487043123503, 1.1118305589831674, 1.0276738986964116, 1.0961804667317852, 1.365415592873898, 2.12048233326853, 1.957624850405378] 
# ]
# res = test_conformal_volumes(quantiles)
# print("85%")
# print(res)

# quantiles = [
# [3.94609390853045, 3.5527766993813725, 3.271554442102554, 3.077887385834685, 3.2669295571767565, 4.7905853586428355, 5.390542187470196, 5.484983795369403, 5.162521761927611, 4.857706369292473, 4.611752506798668, 4.464832738150172, 4.161582309882825, 4.11712896342361, 3.957634110850425, 3.6936754902910183, 3.472020013656633, 3.35524222239807, 3.3015708837384494, 3.7112501226609385, 4.034979858487137, 4.5204205591578965, 4.471245685292971, 4.743040810260859, 4.7564709536962715, 5.087152943385897, 5.677201337941838, 6.159864742583762, 7.015710073402662, 7.147100467417866, 6.861254053187748, 7.0075260373814015, 9.892255522201351, 8.590609028927227], 
# [1.6360977621400936, 1.757388378335163, 1.905057080513151, 2.063567760690858, 2.2277482585486545, 2.5652208317764242, 2.20413711568492, 2.149733418411481, 2.2616290105583303, 2.3234398156266463, 2.4093347778672416, 2.404945245142422, 2.4341405142386288, 2.3870230046941354, 2.3071728695164175, 2.268861308628992, 2.2217556748269582, 2.1212324585868285, 2.1462601684219034, 2.08452649325928, 2.079846054764331, 2.1446232433371675, 2.2371643967019144, 2.356542354494538, 2.3789050247126258, 2.532810027212895, 2.704843186334377, 2.824079904879487, 2.6483679306426184, 2.678703724931979, 2.4128604722861238, 3.0493126289535306, 4.249426618705741, 3.5390716181146504], 
# [0.7925818793656364, 1.0500862391867802, 1.1360961830753358, 1.2865393068220363, 1.3272936187724405, 1.4318616780752402, 1.1405250524733752, 0.9894465963031004, 0.913201338265647, 0.8563112221440933, 0.8352301239202188, 0.8279087535587454, 0.7957472572504313, 0.7722592549717702, 0.7436376335051551, 0.7567287614612208, 0.7598456824506903, 0.6758333135524851, 0.6760281245373501, 0.6868512399632515, 0.7415811179088041, 0.7131620245305453, 0.7776695752004521, 0.8542611232618741, 0.8972930830575426, 0.9521577279833524, 1.0538454228599838, 1.0347946841656634, 1.1203275822023662, 1.2053140032127498, 1.210367383821245, 1.5732523387869537, 2.3213470882736216, 2.12048233326853] 
# ]
# res = test_conformal_volumes(quantiles)
# print("90%")
# print(res)

# res1 = np.array([[0.0783630397613664, 0.03607725235318238, 0.014282796361740624, 4.166839904106563e-05], [0.15352979411546708, 0.07659724233258865, 0.0363702002723888, 0.0004430697703498531], [0.23615102768059684, 0.13295036885671727, 0.06597862344747696, 0.0021543262922522], [0.310140776780417, 0.191809856593076, 0.10352422234183722, 0.006423046205641343], [0.3743216210679779, 0.2573917295573993, 0.1451511793113385, 0.014813786342179685], [0.7192125144117085, 0.3404356813088522, 0.21066473944648426, 0.054622393507673096], [0.9302954288482234, 0.35183880620725067, 0.18192860561640944, 0.06372865809072645], [0.9926655161868992, 0.4044732523190824, 0.1737678847051658, 0.0748532097662557], [1.0420613088296875, 0.4903009979272907, 0.1870676371888613, 0.10199680007455408], [1.083849250086551, 0.5691073438161316, 0.20021526823992228, 0.13088696541716188], [1.1139939386784703, 0.6501213137716391, 0.2189826431371453, 0.16707832723657037], [1.1594083109543014, 0.745975626484643, 0.23272156757290027, 0.2111063575708241], [1.2333411138184454, 0.7897693877479323, 0.236142150476195, 0.24083570761608739], [1.306887146092978, 0.8378687903038174, 0.22761138816220403, 0.25961652895426085], [1.3529035266463072, 0.8679574169891234, 0.2422624550864607, 0.29722059428551867], [1.3614984577861853, 0.8935472810132323, 0.25683160671830074, 0.324332770982313], [1.3566446107767778, 0.9066588000750594, 0.25203072720843017, 0.31992533041287163], [1.340867980760936, 0.9560745391764508, 0.2560549703120923, 0.3399725507693381], [1.3996954211848196, 0.9958714763412775, 0.26300340446810855, 0.38096198911723383], [1.5701957205367743, 1.0097887060959039, 0.28308853153372604, 0.46461638964354496], [1.6039793870901833, 1.026164041100772, 0.32452198088267203, 0.5529492429482974], [1.493934892561636, 1.1445727420272147, 0.3432236979555883, 0.6128574667997253], [1.5025294339970285, 1.2414930393206791, 0.3767237162908148, 0.7363297450935967], [1.8397280015005506, 1.4179117145368556, 0.44502310317907534, 1.2236836771510091], [2.235635260707196, 1.4907206640012627, 0.49657027686928734, 1.7703207636192804]])
# res2 = np.array([[0.08943916738800527, 0.03647026868893783, 0.013742553549244025, 4.482642954909047e-05], [0.15477682241025512, 0.07680604173565013, 0.037369916556249425, 0.00044424591024290905], [0.22162858674710184, 0.12801770554599304, 0.06993884040244706, 0.0019843315775779653], [0.2817846767187006, 0.18740009372243716, 0.10689014882765252, 0.005644491953282315], [0.35646268247128865, 0.26301562460970757, 0.14842004027715966, 0.013915158735204438], [0.6756867276413279, 0.34063182303883316, 0.19851174314549644, 0.045689542572247915], [0.8977964807295234, 0.36581967549053207, 0.18771008788318955, 0.06164992773517853], [1.0607816157718897, 0.41610310994437394, 0.18420550966826818, 0.08130730423347997], [1.1034511607149529, 0.4847447548322139, 0.18776975220650152, 0.10043656878543311], [1.1751587198948565, 0.5623185823240539, 0.19870901331840674, 0.13130961553766748], [1.2074100331332296, 0.6529375847661424, 0.21839906775419135, 0.1721778296145763], [1.2481952369721363, 0.7358021666750246, 0.2356358491236726, 0.21641379813109898], [1.2861894578829378, 0.790593629815968, 0.2501421504708539, 0.254357844194729], [1.3422494823010316, 0.8633582328913572, 0.2545704819826302, 0.2950070024114798], [1.4060472178075005, 0.8751845051843147, 0.2700551784693095, 0.33231659932347646], [1.3849774010928537, 0.9237767053170549, 0.2888944221487183, 0.369614372346338], [1.3618440387344353, 0.9292176211171755, 0.29133370672980513, 0.36866808710661647], [1.315775905461877, 0.9683837172553588, 0.2882225049609004, 0.36724618764568967], [1.5026208329807627, 0.9994982690061603, 0.2958609444227136, 0.4443437658031294], [1.6374489107823822, 1.021471619132171, 0.3237451064970062, 0.5414985223985731], [1.824017348192798, 1.072194763377752, 0.362345814564121, 0.7086403795358617], [1.8859982060143936, 1.176860680656195, 0.39494153702256624, 0.876595305397803], [1.914192306911752, 1.2515700406187755, 0.43088198220272905, 1.032283674732752], [2.139707585656842, 1.342295872661307, 0.46625584674189224, 1.339143050706451], [2.37025528527195, 1.427944082194487, 0.501511000730283, 1.6974101249427884]])
# plt.plot(np.arange(len(res1))/30, res1[:, 3], label="with ensemble")
# plt.plot(np.arange(len(res1))/30, res2[:, 3], label="without ensemble")

# plt.xlabel("Time (s)")
# plt.ylabel("Volume ($\\text{m}^3$)")
# # plt.ylim(ymin=0, ymax=4)
# plt.title("Volume of Ball Uncertainty Region ($\\alpha$ = 0.2).")
# plt.legend()
# plt.savefig("temp1.png")
# plt.clf()

# res1 = np.array([[0.09597675907563978, 0.04202167885559222, 0.018031236973720683, 7.504363164130701e-05], [0.17830739548735472, 0.09059949757659053, 0.045387515144078044, 0.0007595426722393383], [0.26412537133692054, 0.1483424835573331, 0.0789761711973919, 0.0032181077886145972], [0.36148903633917323, 0.22138888828841982, 0.12017695673881583, 0.010030935319874592], [0.4435690854496183, 0.2951505305231744, 0.170194516611787, 0.023602413192748375], [0.843129996585382, 0.39462167237695844, 0.23562177496950185, 0.0830189936867499], [1.068560921103857, 0.39077241128266954, 0.20275602999791045, 0.09060791118773513], [1.2016680296931705, 0.45964874314750964, 0.19926915779046792, 0.11808611649620555], [1.202250057494575, 0.547957766604087, 0.21081272459816291, 0.14820762659230258], [1.2241265398067243, 0.6468252785878166, 0.2299349888410722, 0.19295431472848312], [1.2485099592194129, 0.743080884305107, 0.2511224040981284, 0.24544079762750104], [1.3192750706251897, 0.8320750834883172, 0.2638776322679804, 0.30381141236238673], [1.3999133901096281, 0.8982539346921786, 0.2682753834962483, 0.35321975045359594], [1.5181237894507797, 0.9405339248552959, 0.26688559717616556, 0.3969456431796062], [1.5454486719803862, 0.9602762918319167, 0.2830898711421412, 0.43893747371975567], [1.5876114148364229, 0.9882496180744691, 0.3019464071938679, 0.4917545725060065], [1.5956094136594334, 1.0158105946662637, 0.291865901062013, 0.488211321532923], [1.548185211423546, 1.0628202698872422, 0.29280932891571204, 0.4989999738111381], [1.627744354426437, 1.123664870196587, 0.3036021223168592, 0.5770470754362714], [1.7467586407844047, 1.1263529840897035, 0.32048951965641287, 0.6526933654481829], [1.8524266923915917, 1.1701608843772862, 0.3723356838961655, 0.8355007455006951], [1.9061851972248698, 1.2767717741149978, 0.3886876159957348, 0.9878391070409178], [1.7932785704553567, 1.4687028887412974, 0.4316639174030875, 1.1912682341643044], [2.2345418961181074, 1.551428392698816, 0.5073800758771156, 1.854118324489837], [2.9745429585699465, 1.65756658300417, 0.5648395615363158, 2.9791361784920443]])
# res2 = np.array([[0.10440079271027952, 0.04296459910785283, 0.017725051795443925, 7.950639702008004e-05], [0.18291676200461712, 0.08928772774704263, 0.0503425702657375, 0.0008222060359584157], [0.26163399737548415, 0.15318368704790689, 0.08707179251150797, 0.0034896685572408212], [0.34041916840540704, 0.2219939954510154, 0.12734000030831524, 0.009623212605097811], [0.41545223158868727, 0.29996425661067544, 0.17267709295814782, 0.021519160886117352], [0.7692143378809471, 0.39751897781340756, 0.22929721103312803, 0.0701138814713139], [1.0289853201653043, 0.4157559166723559, 0.2185970247002772, 0.09351727942379993], [1.220272343784541, 0.4601794071450343, 0.21569156210192372, 0.12112034648927054], [1.2647069454126985, 0.5591867888647294, 0.2147195105778136, 0.15185123016757127], [1.315687053342845, 0.6607440432784702, 0.23052410600986792, 0.200402070489092], [1.4025386352268605, 0.7373202554887262, 0.24932670130385284, 0.25783376446937833], [1.4263607153886948, 0.8278499227466808, 0.27018717265913905, 0.3190404200075249], [1.4975446604555591, 0.9031707436108521, 0.2807245341084547, 0.37969074717480256], [1.5774316342243566, 0.9358883252495701, 0.2929582939797835, 0.43249428556113023], [1.6382396658059846, 0.9729993137533642, 0.3092803558306227, 0.49299476470910286], [1.6526021066392877, 1.0168874024378172, 0.33247217903684506, 0.5587229091942159], [1.59485699704027, 1.040212533105184, 0.3435083709533547, 0.5698770336815949], [1.557526552987159, 1.078782178621276, 0.3258798866956445, 0.5475537773138202], [1.7156837762276484, 1.1386694441690113, 0.3487791743493127, 0.6813738411939128], [1.974318842197022, 1.1595958126531511, 0.3681255747170217, 0.8427910575561814], [2.217725488277565, 1.2008433576500008, 0.4176022758208501, 1.1121337097290525], [2.4080021695658007, 1.2926276194554502, 0.4540547646226527, 1.4133136139974167], [2.4428919448283946, 1.466168479564552, 0.4817488351110199, 1.7254755481472646], [2.7685908734717573, 1.5538048656497834, 0.5709828353730582, 2.456282493330861], [3.0266091023793478, 1.630890747740562, 0.6052511179951237, 2.9875611488655442]])
# plt.plot(np.arange(len(res1))/30, res1[:, 3], label="with ensemble")
# plt.plot(np.arange(len(res1))/30, res2[:, 3], label="without ensemble")

# plt.xlabel("Time (s)")
# plt.ylabel("Volume ($\\text{m}^3$)")
# # plt.ylim(ymin=0, ymax=4)
# plt.title("Volume of Ball Uncertainty Region ($\\alpha$ = 0.15).")
# plt.legend()
# plt.savefig("temp2.png")
# plt.clf()

# res1 = np.array([[0.11802003457603023, 0.052183025776590425, 0.023814546157036764, 0.0001513478118383808], [0.22515717674727034, 0.11003603750150102, 0.058907039149946126, 0.001511849487577875], [0.3264002704537822, 0.18138956940365314, 0.10260789149036632, 0.006317895351591577], [0.42387142365779434, 0.2700732149339511, 0.1503127470545235, 0.017946540490198712], [0.5497484010921212, 0.35005048729363947, 0.20559430347676264, 0.04190942916086723], [1.018942062831842, 0.47906722660085693, 0.2776282906838014, 0.14351465103147348], [1.3293461666791138, 0.4550490913041944, 0.24495957684981626, 0.15858420144395136], [1.367617821102318, 0.5347533848820466, 0.23656888318341926, 0.1856197076201157], [1.4088485340943204, 0.6329184901697376, 0.24594403601553574, 0.23403468219235637], [1.4366944237898158, 0.7408832615323852, 0.26650332604487986, 0.30064428795199616], [1.4569961084433067, 0.8551042971602852, 0.294183328398167, 0.3861257198279315], [1.5388581166618505, 0.9429974777948535, 0.30556474422822233, 0.4650674955163034], [1.5998779231450442, 1.0333935358619657, 0.3110746523088724, 0.5384942493197936], [1.7602141815302559, 1.1004988672452773, 0.3160462859631238, 0.6377200302773076], [1.8485969869001107, 1.107962440903551, 0.33820266245834346, 0.7237221055164655], [1.8986255873815314, 1.1305005583705934, 0.3634552977399239, 0.8097832450176511], [1.8372839933209983, 1.1779967318651312, 0.3611989346368043, 0.8067741921793367], [1.8150797177697424, 1.213421675482388, 0.3468056655983974, 0.7910911142915772], [1.924955746086048, 1.269900321341561, 0.37125411142843545, 0.9430725296389538], [2.0946495328575794, 1.3260572966808524, 0.4070195551611416, 1.1702452468276203], [2.2272035734550104, 1.401185096962697, 0.41952578030836973, 1.3553131521559103], [2.4943222729789016, 1.4942604876959744, 0.45252150211880415, 1.7612671834770528], [2.577771395265037, 1.5821298247338558, 0.5028843617321226, 2.149001674559142], [2.76942312127275, 1.7409115098652947, 0.5762881378514558, 2.92879848095237], [3.5135999554737207, 1.883997261231317, 0.6355472334533813, 4.500434371603167]])
# res2 = np.array([[0.12627500507297462, 0.05235512838848307, 0.025362620139700625, 0.00016767593656945304], [0.22737770876040933, 0.11247285621345067, 0.0672055193079543, 0.0017187018768768062], [0.3140692264418448, 0.18288547972926364, 0.10906523357523211, 0.006264565356748092], [0.39396958538683907, 0.2641366733684276, 0.16467703127322142, 0.017136590877128592], [0.5227087291482833, 0.3564397213677821, 0.21236697900359047, 0.039566973982621], [0.9197923888594305, 0.4925223997010733, 0.27491744219044384, 0.12454264730860898], [1.2074814499933342, 0.49372671391341966, 0.2554776117540351, 0.15230702716279707], [1.40415585161457, 0.5503317551133412, 0.2532983286535951, 0.19573667716149137], [1.4868062674351499, 0.6513491550408032, 0.2630019854205053, 0.25469901431964564], [1.5544660381735875, 0.7435007410005271, 0.2740195910861118, 0.31669722477253603], [1.6233368823931216, 0.8480858418092748, 0.294001003619915, 0.4047597154873299], [1.7144957714496758, 0.9234989741346973, 0.31791696136656006, 0.5033690793954387], [1.7312182409112558, 1.0126024539232652, 0.3310308590161808, 0.5803089596780903], [1.8444737756137781, 1.0693863061029696, 0.34597214622735345, 0.6824144888591085], [1.8996643732082168, 1.1074429773678829, 0.35694606408247603, 0.7509324103355705], [1.891161851028991, 1.1616569900180467, 0.3874451258681429, 0.8511709841488196], [1.8887788874292166, 1.2086350871058613, 0.4133560512531746, 0.9436275613313331], [1.9326195201012952, 1.2218298961460088, 0.3892799886062327, 0.9192194137727941], [2.007355097312983, 1.3049261824005132, 0.41102509971871026, 1.076659789469773], [2.3752000785029956, 1.3340969556859368, 0.43958479357648195, 1.3929330811159786], [2.7115064649033656, 1.3976565488016275, 0.49834251123471507, 1.8885959079442698], [3.1823760736471622, 1.509814763309371, 0.502066065269503, 2.4123262162540495], [3.2908368243756208, 1.6465529959726057, 0.5723648073475325, 3.10138001914676], [3.642655342280345, 1.809824528251803, 0.6560725426651202, 4.3252021854749065], [3.805176762957013, 1.9031240197701031, 0.717834466446035, 5.198358579090954]])
# plt.plot(np.arange(len(res1))/30, res1[:, 3], label="with ensemble")
# plt.plot(np.arange(len(res1))/30, res2[:, 3], label="without ensemble")

# plt.xlabel("Time (s)")
# plt.ylabel("Volume ($\\text{m}^3$)")
# # plt.ylim(ymin=0, ymax=4)
# plt.title("Volume of Ball Uncertainty Region ($\\alpha$ = 0.1).")
# plt.legend()
# plt.savefig("temp3.png")
# plt.clf()
